#!/usr/bin/env python3
"""
Python script decoding network capture of the Scotch malware C2 communications
"""
__author__ = "Etienne Maynier"
__license__ = "MIT"

import base64
import pyshark
from io import BytesIO
import gzip
import json
import argparse

COMMANDS = {
   -1: "VOID",
    0: "OFFLINE",
    1: "ONLINE",
    2: "DEV_INFO",
    3: "GET_PLUGIN_INFO",
    4: "GET_CALLLOG",
    5: "GET_CONTACT",
    6: "GET_LOCATION",
    7: "GET_SMS",
    8: "GET_FILE",
    9: "CLEAR",
    10: "SHELL",
    11: "NOTIFICATION",
    12: "CAMERA",
    13: "RECORD",
    14: "SCREEN_SNAP"
}

ERRORS = {
    -1 : "UNKNOW",
    0: "SUCCESS",
    1: "SERVER_ERROR",
    2: "PLUGIN_DATA_NOT_FOUND",
    3: "PLUGIN_NO_NEED_UPDATE",
    4: "COMMAND_NOT_MATCH",
    5: "CONTEXT_NOT_FOUND",
    6: "GET_WHISKY_ID_FAILED",
    7: "GET_DEVICE_ID_FAILED",
    8: "COMMAND_TYPE_NOT_REGISTERED",
    9: "PERMISION_NOT_GRANTED",
    10: "CONTENT_RESOLVER_CURSOR_EXCEPTION",
    11: "CONTENT_RESOLVER_CURSOR_NULL_OR_ZERO",
    12: "CONTENT_RESOLVER_CURSOR_GET_EXCEPTION",
    13: "GET_ACTIVITY_FAILED",
    14: "OBSERVER_ALREADY_REGISTER",
    15: "OBSERVER_ALREADY_UNREGISTER",
    16: "GET_DEVICE_INFO_FAILED",
    17: "GET_SMS_FAILED",
    18: "GET_SMS_TO_JSON_FAILED",
    19: "GET_CONTACT_FAILED",
    20: "GET_CONTACT_TO_JSON_FAILED",
    21: "GET_CALLLOG_FAILED",
    22: "GET_CALLLOG_TO_JSON_FAILED",
    23: "GET_LOCATION_FAILED",
    24: "GET_LOCATION_TO_JSON_FAILED",
    25: "GET_LOCATION_SERVICE_FAILED",
    26: "GPS_PROVIDER_NOT_ENABLE",
    27: "NETWORK_PROVIDER_NOT_ENABLE",
    28: "FETCH_FILE_NO_PATH_SUBCMD",
    29: "FETCH_FILE_NO_SUCH_FILE",
    30: "FETCH_FILE_READ_FILE_FAILED",
    31: "FETCH_FILE_NO_READ_PERMISSION",
    32: "FETCH_FILE_TO_LARGE",
    33: "UPLOAD_FILE_FAILED",
    34: "LIST_DIR_NO_PATH_SUBCMD",
    35: "LIST_DIR_NOT_EXIST",
    36: "LIST_DIR_IS_NOT_DIR",
    37: "LIST_DIR_NO_READ_PERMISSION",
    38: "UPDATE_FILE_NO_FORCE_SUBCMD",
    39: "UPDATE_FILE_NO_PATH_SUBCMD",
    40: "UPDATE_FILE_NO_MODIFY_SUBCMD",
    41: "UPDATE_FILE_NO_SHA256_SUBCMD",
    42: "UPDATE_FILE_NO_SUCH_FILE",
    43: "UPDATE_FILE_READ_FILE_FAILED",
    44: "UPDATE_FILE_NO_READ_PERMISSION",
    45: "UPDATE_FILE_TO_LARGE",
    46: "UPDATE_FILE_NO_NEED_UPDATE",
    47: "UPDATE_FILE_CALC_SHA256_FAILED",
    48: "UPDATE_FILE_NO_SUCH_SUBCMD",
    49: "GET_PACKAGE_NAME_FAILED",
    50: "GET_REPLACE_SO_PATH_FAILED",
    51: "CLEAR_SOME_FILE_FAILED",
    52: "CLEAR_NO_IS_ALL_ARGUMENT",
    53: "CLEAR_RETURN_TO_JSON_FAILED",
    54: "GET_SHELL_RESULT_FAILED",
    55: "GET_CAMERA_FEATURE_FAILED",
    56: "GET_CAMERA_JSON_FAILED",
    57: "GET_CAMERA_PREVIEW_FAILED",
    58: "GET_CAMERA_SNAP_TO_FILE_FAILED",
    59: "SEND_SMS_GENERIC_FAILURE",
    60: "SEND_SMS_RADIO_OFF",
    61: "SEND_SMS_NULL_PDU",
    62: "SEND_SMS_NO_SERVER",
    63: "SEND_SMS_CODE_ERROR",
    64: "GET_RECORD_TO_FILE_FALIED",
    65: "GET_RECORD_TIME_TOO_LONG_FAILED",
    66: "GET_RECORD_RECORDING_FAILED",
    67: "SCREEN_SNAP_IN_HOST_FAILED",
    68: "SCREEN_SNAP_CREATE_BITMAP_FAILED",
    69: "SCREEN_SNAP_OUT_HOST_FAILED",
    70: "SCREEN_SNAP_GET_MEDIA_PROJECTION_FAILED",
    71: "PLUGIN_LOAD_FAILED",
    72: "PLUGIN_DOWNLOAD_FAILED"
}


def decode(data):
    d = base64.b64decode(data)
    return gzip.GzipFile(fileobj=BytesIO(d)).read()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Scotch Whisky C2 communications')
    parser.add_argument('PCAP')
    args = parser.parse_args()

    cap = pyshark.FileCapture(args.PCAP)

    for p in cap:
        if 'DATA-TEXT-LINES' in p:
            # pyshark bug here when there are multiple lines
            # Ugly, but the world is ugly
            data = str(p['DATA-TEXT-LINES'])[24:].replace('\n', '').replace('\t', '').replace("\\n", '')
            if "[truncated]" in data:
                # Even worse :o
                data = bytearray.fromhex(p.tcp.payload.replace(':', ''))[4:].decode('utf-8')
            cleartext = decode(data)
            js = json.loads(cleartext)
            if p.tcp.dstport == "10011":
                print("CLIENT -> SERVER : {:15s} | {:27s} -> [{}]".format(COMMANDS[js['cmd_type']], ERRORS[js['error']], js['data'] if 'data' in js else ''))
            else:
                print("SERVER -> CLIENT : {:15s} | {:27s} -> [{}]".format(COMMANDS[js['cmd_type']], ERRORS[js['error']], js['data'] if 'data' in js else ''))
